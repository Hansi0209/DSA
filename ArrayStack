Got it üëç
Here‚Äôs a clean **Java implementation of `ArrayStack`** you can directly put in your `Data_Structures/ArrayStack.java` file on GitHub:

```java
// File: Data_Structures/ArrayStack.java

public class ArrayStack<T> {
    private T[] stack;
    private int top;
    private int capacity;

    // Constructor
    @SuppressWarnings("unchecked")
    public ArrayStack(int capacity) {
        this.capacity = capacity;
        this.stack = (T[]) new Object[capacity];
        this.top = -1;
    }

    // Push an element onto the stack
    public void push(T item) {
        if (isFull()) {
            System.out.println("Stack Overflow! Cannot push " + item);
            return;
        }
        stack[++top] = item;
        System.out.println(item + " pushed into stack");
    }

    // Pop an element from the stack
    public T pop() {
        if (isEmpty()) {
            System.out.println("Stack Underflow! Cannot pop");
            return null;
        }
        return stack[top--];
    }

    // Peek at the top element
    public T peek() {
        if (isEmpty()) {
            System.out.println("Stack is empty!");
            return null;
        }
        return stack[top];
    }

    // Check if the stack is empty
    public boolean isEmpty() {
        return top == -1;
    }

    // Check if the stack is full
    public boolean isFull() {
        return top == capacity - 1;
    }

    // Display all elements in the stack
    public void display() {
        if (isEmpty()) {
            System.out.println("Stack is empty!");
            return;
        }
        System.out.print("Stack elements: ");
        for (int i = 0; i <= top; i++) {
            System.out.print(stack[i] + " ");
        }
        System.out.println();
    }

    // Main method for quick testing
    public static void main(String[] args) {
        ArrayStack<Integer> stack = new ArrayStack<>(5);

        stack.push(10);
        stack.push(20);
        stack.push(30);

        stack.display();

        System.out.println("Top element: " + stack.peek());

        System.out.println("Popped: " + stack.pop());
        stack.display();
    }
}
```

---

### üìå Features:

* Generic (can store any type, e.g., `Integer`, `String`, etc.)
* `push`, `pop`, `peek`, `isEmpty`, `isFull`, `display` methods
* `main` method included for testing

---

Would you like me to also give you the **LinkedListCollection code** next so you can upload them one by one to your GitHub?
