// File: Data_Structures/LinkedHashSetSequencedSet.java

import java.util.LinkedHashSet;
import java.util.Iterator;

public class LinkedHashSetSequencedSet<T> {
    private LinkedHashSet<T> set;

    // Constructor
    public LinkedHashSetSequencedSet() {
        set = new LinkedHashSet<>();
    }

    // Add element (no duplicates allowed)
    public void add(T item) {
        if (set.add(item)) {
            System.out.println(item + " added to the set.");
        } else {
            System.out.println(item + " already exists in the set.");
        }
    }

    // Remove element
    public void remove(T item) {
        if (set.remove(item)) {
            System.out.println(item + " removed from the set.");
        } else {
            System.out.println(item + " not found in the set.");
        }
    }

    // Check if element exists
    public boolean contains(T item) {
        return set.contains(item);
    }

    // Get size
    public int size() {
        return set.size();
    }

    // Check if empty
    public boolean isEmpty() {
        return set.isEmpty();
    }

    // Display elements in insertion order
    public void display() {
        System.out.print("Elements in set (in insertion order): ");
        Iterator<T> it = set.iterator();
        while (it.hasNext()) {
            System.out.print(it.next() + " ");
        }
        System.out.println();
    }

    // Main method for testing
    public static void main(String[] args) {
        LinkedHashSetSequencedSet<String> sequencedSet = new LinkedHashSetSequencedSet<>();

        sequencedSet.add("A");
        sequencedSet.add("B");
        sequencedSet.add("C");
        sequencedSet.add("B");  // duplicate, wonâ€™t be added

        sequencedSet.display();

        System.out.println("Contains A? " + sequencedSet.contains("A"));
        System.out.println("Contains Z? " + sequencedSet.contains("Z"));

        sequencedSet.remove("B");
        sequencedSet.display();
    }
}
